<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C++动态内存]]></title>
    <url>%2F2019%2F05%2F17%2FC-%E5%86%85%E5%AD%98%2F</url>
    <content type="text"><![CDATA[了解动态内存在 C++ 中是如何工作的是成为一名合格的 C++ 程序员必不可少的。 了解动态内存在 C++ 中是如何工作的是成为一名合格的 C++ 程序员必不可少的。C++ 程序中的内存分为两个部分：栈：在函数内部声明的所有变量都将占用栈内存。堆：这是程序中未使用的内存，在程序运行时可用于动态分配内存。 很多时候，您无法提前预知需要多少内存来存储某个定义变量中的特定信息，所需内存的大小需要在运行时才能确定。在 C++ 中，您可以使用特殊的运算符为给定类型的变量在运行时分配堆内的内存，这会返回所分配的空间地址。这种运算符即 new 运算符。如果您不再需要动态分配的内存空间，可以使用 delete 运算符，删除之前由 new 运算符分配的内存。 new 和 delete 运算符下面是使用 new 运算符来为任意的数据类型动态分配内存的通用语法： 1new data-type; 在这里，data-type 可以是包括数组在内的任意内置的数据类型，也可以是包括类或结构在内的用户自定义的任何数据类型。让我们先来看下内置的数据类型。例如，我们可以定义一个指向 double 类型的指针，然后请求内存，该内存在执行时被分配。我们可以按照下面的语句使用 new 运算符来完成这点： 12double* pvalue = NULL; // 初始化为 null 的指针pvalue = new double; // 为变量请求内存 如果自由存储区已被用完，可能无法成功分配内存。所以建议检查 new 运算符是否返回 NULL 指针，并采取以下适当的操作： 12345678double* pvalue = NULL;if( !(pvalue = new double ))&#123; cout &lt;&lt; &quot;Error: out of memory.&quot; &lt;&lt;endl; exit(1); &#125; malloc() 函数在 C 语言中就出现了，在 C++ 中仍然存在，但建议尽量不要使用 malloc() 函数。new 与 malloc() 函数相比，其主要的优点是，new 不只是分配了内存，它还创建了对象。在任何时候，当您觉得某个已经动态分配内存的变量不再需要使用时，您可以使用 delete 操作符释放它所占用的内存，如下所示： 1delete pvalue; // 释放 pvalue 所指向的内存 下面的实例中使用了上面的概念，演示了如何使用 new 和 delete 运算符： 123456789101112131415#include &lt;iostream&gt;using namespace std; int main ()&#123; double* pvalue = NULL; // 初始化为 null 的指针 pvalue = new double; // 为变量请求内存 *pvalue = 29494.99; // 在分配的地址存储值 cout &lt;&lt; &quot;Value of pvalue : &quot; &lt;&lt; *pvalue &lt;&lt; endl; delete pvalue; // 释放内存 return 0; 数组的动态内存分配假设我们要为一个字符数组（一个有 20 个字符的字符串）分配内存，我们可以使用上面实例中的语法来为数组动态地分配内存，如下所示： 12char* pvalue = NULL; // 初始化为 null 的指针pvalue = new char[20]; // 为变量请求内存 要删除我们刚才创建的数组，语句如下： 1delete [] pvalue; // 删除 pvalue 所指向的数组 一维数组12345// 动态分配,数组长度为 mint *array=new int [m]； //释放内存delete [] array; 二维数组123456789101112131415int **array// 假定数组第一维长度为 m， 第二维长度为 n// 动态分配空间array = new int *[m];for( int i=0; i&lt;m; i++ )&#123; array[i] = new int [n] ;&#125;//释放for( int i=0; i&lt;m; i++ )&#123; delete [] arrar[i];&#125;delete [] array; 二维数组实例测试：12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;using namespace std; int main()&#123; int **p; int i,j; //p[4][8] //开始分配4行8列的二维数据 p = new int *[4]; for(i=0;i&lt;4;i++)&#123; p[i]=new int [8]; &#125; for(i=0; i&lt;4; i++)&#123; for(j=0; j&lt;8; j++)&#123; p[i][j] = j*i; &#125; &#125; //打印数据 for(i=0; i&lt;4; i++)&#123; for(j=0; j&lt;8; j++) &#123; if(j==0) cout&lt;&lt;endl; cout&lt;&lt;p[i][j]&lt;&lt;&quot;\t&quot;; &#125; &#125; //开始释放申请的堆 for(i=0; i&lt;4; i++)&#123; delete [] p[i]; &#125; delete [] p; return 0;&#125; 三维数组12345678910111213141516171819202122int ***array;// 假定数组第一维为 m， 第二维为 n， 第三维为h// 动态分配空间array = new int **[m];for( int i=0; i&lt;m; i++ )&#123; array[i] = new int *[n]; for( int j=0; j&lt;n; j++ ) &#123; array[i][j] = new int [h]; &#125;&#125;//释放for( int i=0; i&lt;m; i++ )&#123; for( int j=0; j&lt;n; j++ ) &#123; delete array[i][j]; &#125; delete array[i];&#125;delete [] array; 三维数组测试实例：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include &lt;iostream&gt;using namespace std; int main()&#123; int i,j,k; // p[2][3][4] int ***p; p = new int **[2]; for(i=0; i&lt;2; i++) &#123; p[i]=new int *[3]; for(j=0; j&lt;3; j++) p[i][j]=new int[4]; &#125; //输出 p[i][j][k] 三维数据 for(i=0; i&lt;2; i++) &#123; for(j=0; j&lt;3; j++) &#123; for(k=0;k&lt;4;k++) &#123; p[i][j][k]=i+j+k; cout&lt;&lt;p[i][j][k]&lt;&lt;&quot; &quot;; &#125; cout&lt;&lt;endl; &#125; cout&lt;&lt;endl; &#125; // 释放内存 for(i=0; i&lt;2; i++) &#123; for(j=0; j&lt;3; j++) &#123; delete [] p[i][j]; &#125; &#125; for(i=0; i&lt;2; i++) &#123; delete [] p[i]; &#125; delete [] p; return 0;&#125; 对象的动态内存分配对象与简单的数据类型没有什么不同。例如，请看下面的代码，我们将使用一个对象数组来理清这一概念： 12345678910111213141516171819202122#include &lt;iostream&gt;using namespace std; class Box&#123; public: Box() &#123; cout &lt;&lt; &quot;调用构造函数！&quot; &lt;&lt;endl; &#125; ~Box() &#123; cout &lt;&lt; &quot;调用析构函数！&quot; &lt;&lt;endl; &#125;&#125;; int main( )&#123; Box* myBoxArray = new Box[4]; delete [] myBoxArray; // 删除数组 return 0;&#125;]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[第一篇博客搭建 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
